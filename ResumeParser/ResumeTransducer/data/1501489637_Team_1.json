{"credibility":[{"References":"\n\n1. Raspberry Pi Home automation system with Arduino by Andrew K Dennis\n\n2. Magazine for Raspberry Pi users \u201CThe MagPi \u201C\n\n3. Raspberry Pi Architecture by Jon Holton and Tim Fratangelo \u201CThe Raspberry Pi Foundation\u201D [4] \u201CHome Automation as a service\u201D at International Journal of Computer Networks and Wireless Communications (IJCNWC), June 2012\n\n5. Home Automation based on ARM and ZigBEE at Undergraduate Academic Research Journal (UARJ), 2012 statistical.\n\n6. Raspberry pi forum discussions at raspberrypi.org\/forums\n\n9. Raspberry Pi Technical documentations from elinux.org\n\n10. Raspberry Pi latest kit from raspberrypi.org\n\n11. Debian linux command line from debian.org\n\n12. PuTTy a free telnet\/ssh client from putty.org [13] Python application development sources for python.org\nOverall Description\nProduct Perspective\n\nSMARTHOME  SECURITY SYSTEM is a generic solution for home automation enhanced with machine learning techniques. It uses a wireless platform for communication between devices and allows you to collect data and control home appliances from a single web interface. In market, there are lots of home automation systems, but they lack the adaptability and generic way of application in variety of home appliances. Moreover, since SMARTHOME  SECURITY SYSTEM is open source; it allows collaboration of developers for new enhancements to the project.\n\nProduct Functions\n\nIn our home automation security  system, the user indicates the person purchasing the product to take advantage of energy efficiency for his\/her home. The user basically has rights to choose a device, turn it on & off , control the guest activity, getting & updating the sensor info of the device and adjust it according to the configurations types of the device. Their main functionalities are shown by the below use case diagram.\n\nUser Classes and Characteristics\n\nThis project is intended to be used by various of user classes. These classes can be listed as follows:\n\n1. Home owners: − User interface provided by SMARTHOME is easy-to-use and user friendly, in turn allows an average computer user to control home appliances they own.\n\n2. Open source software developers and contributors: − People with good knowledge of Python programming language can contribute to the main program which runs on Coordinator Box - Also, network programmers and web designers can easily extend features provided by web interface.\n\n3. Software Engineers & Computer Scientists involved in machine learning. - Statistical data collected by coordinator box can be used in various cases of everyday situations in an efficient way. Although we implemented substantial concepts regarding an ordinary home, people who are experienced in machine learning can always provide new ways of adaptation for SMARTHOME.\n\nOperating Environment\n\n1.Raspberry Pi: A microprocessor will interface with the android module to perform the automation. A simple microprocessor will receive signals from the smartphone and it will be processed.\n\n2. Develop Software Interface Mobile Device: An web application to be developed that running on mobile devices that communicates between pi and home devices easily.\n\nIntegrate the Sensors to a Device: The Raspberry Pi needs to be integrated with the lighting, door sensors and webcam control systems at a low cost with easy installation. After extensive research into the products and solutions currently available, the following were chosen to meet our application specific requirements.\n\nDesign and Implementation Constraints\n\nSmart home security system is a platform dependent. Embedded Linux working on a Beagle Board device or PC with Linux OS is a necessity.\n\n- Work products such as documents will be in compliance with IEEE standards\n\nUser Interfaces\n\nOnce the template was produced, it was time integrate all the development work to make a complete interface. The python code manages the list of controls that are to be displayed to the user. The software package provides various views to control different aspects of the controls, such as how they are managed and how they appear on specific client software. The Servlet application runs on OpenShift PAAS wherein the Raspberry Pi microprocessor and the users are clients to it. Since OpenShift can provide more powerful applications, a more advanced user interface was created.\n\nHardware Interfaces\n\nThe next step was the integration of the electronic components into our Raspberry Pi and setting it up for remote access. Here we use a DLink 2750u router that has a ISP connection. The hardwares interaction takes place through WiFi wherein all devices are connected to the RPi through Ethernet. The Android Application Controls the Integrated peripherals such as Camera, Door Sensors and Lighting Devices. The Integrated Hardware with software application for client side.\n\nSoftware Interfaces\n\nThe backend code that we produced for the applications is explained in the next section. The code flow charts will help describe the flow of the code. The server and client application is written using Python code as the interface for Raspberry Pi to connect to lights and sensors. The software produced utilizes both the built in functions as well as user defined methods\n\nThe following picture gives an overview of how this system is going to work.\n\n�\n\nThe system administrator of the HASS system has the ability to add a new appliance or delete an existing one. The system administrator has the ability to add a new remote device and configure it with HASS or delete an existing one when it is not used. Also the system administrator can create an account for a new user or delete existing account if it is no longer used.\n\nFunctional Requirement\n\nA home appliance control system (HASS) is a system which is controlled by a remote system such as a mobile phone or a palm-top, and at the same time controls, monitors and coordinates home appliances such as air conditioner, microwave oven, garage doors, TV set, VCR, audio controller, indoor\/outdoor lights, water sprinkler, home security system, bath tub controller, etc.\n\nIn order to activate home appliances and to allow for different ways of cooking, the HASS needs mechanisms for communication between the different devices in the system, and for coordination among the various processes running on such devices.\n\nNote that the HASS needs mechanisms for adapting to different needs of the user as well. For example, when the user is very hungry, the microwave oven may need to respond to the user\u2019s request that it operate maximally to cook the food as fast as it can. For another example, if the user is hungry, tired and may come home late, then the system may be asked to fully cook the meal by the expected arrival time, and periodic warming up every 10 minutes afterwards.\n\nNon-Functional Requirement\nAdaptability\n\nThe HASS shall be adaptable. Any change is environment shall be detectable, and the HASS shall then be transformable through recognition of the change in HASS needed and the change recognized shall be enacted in the system. The system could be automatically adaptable or manually adaptable. Since speed is of paramount importance for any real-time system, it shall be given a priority comparable to that of the adaptability requirement. This presumably according to the customer needs. Detecting changes in the environment is usually a very time-consuming task, hence hurting speed. Similarly, detection of events could induce significant performance penalty.\n\nSafety\n\nThe HASS shall also be safe. For example, the microwave oven should now blow up or become too hot to touch.\nUse Case Diagram\n\nUse case diagrams are intended to model the functional requirements of the system. It shows a set of use cases and actors and their relationships. It is always selected to be the start point of software design. The following figure shows the use case diagram of the HASS system from the end user point of view.\n\nActors\n\nUser\n\nUser refers to the person who has an account and a password, can log in on HASS, and operate home appliances remotely by HASS.\n\nAdmin\n\nAdmin is a kind of user who has special rights, for example Add\/Remove Device and Add\/Remove Remote System, other than basic operations.\n\nDevice\n\nDevice refers to computer embedded home appliances that could be added onto HASS, configured, and operated remotely.\n\nTV\n\nTV is a special home appliance that has several operations, such as turn on, turn off, increase volume, decrease volume, and change channel, which can be operated remotely.\n\nGarage door\n\nGarage door is a special home appliance that has operations of opening and closing to be manipulated remotely.\n\nMicrowave\n\nMicrowave is a special home appliance that has several operations, such as setting command, setting timer, starting, and so on, that can be operated remotely.\n\nRemote System\n\nRemote System refers to system that has wireless connection. It can be added onto HASS system, configured with HASS, and communicate with HASS.\n\nPalm-top\n\nPalm-top is a special remote system.\n\nCell phone\n\nCell phone is a special remote system.\n\nEmergency Department\n\nEmergency Department is a public department that can help if there is an emergency happens in the house.\n\nPolice Department\n\nPolice Department is a special emergency department which will be noticed when there is a break in through garage door.\n\nFire Department\n\nFire Department is a special emergency department which will be noticed when there is a fire in the house.\n\nUse Cases\n\nOperate\n\nThe use case Operate is a service provided for the users to operate on the devices that are connected to HASS through remote devices. For example, user can send messages of turning on a TV, starting microwave to cook for five minutes, and so forth to HASS and then HASS will perform the action.\n\nRestart\/Redo\n\nThe use case Restart\/Redo is an extension of the use case Operate . When the HASS could not conduct the command that the user sent, it shall detect and fix the error or restart the device to make it function normally. And the operation will be conducted once more. Besides, the HASS shall inform the user about this exception.\n\nOperate Microwave\n\nThe use case Operate Microwave is a service provided for the users to operate on the microwave that is connected to HASS through remote systems. Users can send messages of cooking, defrosting, stopping, etc.\n\nOperate Garage Door\n\nThe use case Operate Garage Door is a service provided for the users to operate on the garage door that is connected to HASS through remote systems. Users can send messages of opening and closing it.\n\nOperate TV\n\nThe use case Operate TV is a service provided for the users to operate on the TV that is connected to HASS through remote systems. Users can send messages of turning it on, turning it off, increasing the volume, decreasing the volume, and changing channels.\n\nCheck\/Update Status\n\nThe use case Check\/Update Status means that the HASS keeps a record of the state of all the connected devices. It keeps updating their states from time to time. When users require the state information of some device through remote systems, the HASS send the latest state of that device to the remote system that requested.\n\nControl\n\nSometimes the device may malfunction. For example, the microwave may keep cooking for an hour, which is not required by the users. The use case Control means it can detect such malfunctioning by updating the state of the devices, stop it (using operate use case), and inform the user what happened. Another case there might be some emergency happens, for example, a break in through the garage door or fire starts, the HASS shall detect them and notify police department and fire department respectively.\n\nAdd\/Remove Device\n\nThe use case Add\/Remove Device is a service for the users to add a device, for example, microwave, TV, and garage door, onto the HASS to be controlled remotely and automatically, as well as remove a device from the HASS that is no longer to be controlled. When a device is connected to HASS, both the HASS and the device are configured in order to collaborate with each other.\n\nAdd\/Remove Remote System\n\nThe use case Add\/Remove Remote System is a service for the users to add or remove a remote control system, for example, cell phone and palm-top, onto the HASS, so that the remote system can be used to communicate with the HASS and control the devices.\n\nClass Diagram\n\nUML Class Diagram and Description\n\nAppliance Class\n\nThe Appliance class shall act as a common parent class to all of the different types of appliances. The use of a common parent class allows for a certain interface between the HASS controller and the appliances to be enforced. Enforcing a common interface ensures that the entire system does not need to be recompiled to add a device to the system, but rather that appliances can be added or removed from the system dynamically simply by adding the appliance\u2019s compiled class file to the system\u2019s directory and then instructing the system to add the appliance to the system.\n\nDoor\/Window, Cooking Appliance, and AV Appliance Class\n\nThe Door\/Window, Cooking Appliance, and AV Appliance classes serve as an example of the appliance type layer of classes. These classes will directly inherit from the Appliance class, but will not themselves represent physical appliances. Rather, this layer serves to enforce a common interface and common properties among a given type of appliance.\n\nGarage Door, Microwave, and Device Classes\n\nThe GarageDoor, Microwave, and Device classes are examples of the classes the represent actual physical appliances. These classes inherit from their respective appliance type class, and thus from the Appliance class. These classes will contain the actual implementation of the appliance function. Because all these classes inherit from the same Appliance class, all can be indexed by the HASS system and can be sent commands in the same manner.\n\nHASS Controller Class\n\nThe HASS controller class is the heart of the system. This is the class that controls appliances, devices, and users. The HASS controller contains an array of appliances, which is the list of all of the appliances on the system. A command can be sent to an appliance simply by calling that appliance\u2019s SendCommand(string) method. Each Appliance\u2019s SendCommand(string) method can interpret the command embedded in the string parameter, and will call the appropriate internal methods. And Appliance\u2019s GetCommands() method returns a list of all of the valid commands for that Appliance, which can then be passed up to the user. The HASS Controller class also handles interaction between the system and remote devices, and it handles the users logging in and out of the system. In addition, it handle adding and removing users and devices to\/from the system.\n\nDevice Class\n\nThe Device class represents a physical device used to remotely administer the system. It contains information on the device itself and the user currently using the device.\n\nUser Class\n\nThe User class represents a user. It contains the user\u2019s name and password, whether or not the user has permission to administer the system, and an array of Permissions, indicating which appliances the user may or may not control.\n\nAdministrator Class\n\nAn instance of the permission class contains one link between a user and an appliance and indicates whether or not that user is allowed to use that appliance.\n\nPermission Class\n\nAn instance of the permission class contains one link between a user and an appliance and indicates whether or not that user is allowed to use that appliance.\n\nCRC Cards\n\nHASS Controller\n\nHASS Controller\n\nRESPONSIBILTIES\n\nCOLLABORATORS\n\n- allow user to login and logout.\n\n- add appliances or remove appliances\n\n- request for states of appliances\n\n- send commands to appliances to execute\n\n- get appliances that are connected to HASS\n\nUser\n\nAdministrator\n\nAppliance\n\nDevice\n\nUser\n\nUser\n\nRESPONSIBILTIES\n\nCOLLABORATORS\n\n- get name and password of the user\n\n- set name and password of the user\n\n- set permission to become an administrator\n\n- get whether the user is an administrator\n\nHASS Controller\n\nPermission\n\nDevice\n\nAdministrator\n\nAdministrator\n\nRESPONSIBILTIES\n\nCOLLABORATORS\n\n- get name and password of the user\n\n- set name and password of the user\n\n- set permission to become an administrator\n\n- get whether the user is an administrator\n\n- set access permission of a user to an appliance\n\nHASS Controller\n\nPermission\n\nDevice\n\nAppliance\n\nAppliance\n\nRESPONSIBILTIES\n\nCOLLABORATORS\n\n- get name of the appliance\n\n- set name of the appliance\n\n- get current command (state) the appliance is executing\n\n- execute a command\n\nHASS Controller\n\nPermission\n\nDoor\/Window\n\nDoor\/Window\n\nRESPONSIBILTIES\n\nCOLLABORATORS\n\n- get name of the appliance\n\n- set name of the appliance\n\n- get current command the appliance is executing\n\n- get current state (open or closed)\n\n- set attributes, i.e. height and weight\n\n- execute a command\n\nHASS Controller\n\nPermission\n\nCooking Appliance\n\nCooking Appliance\n\nRESPONSIBILTIES\n\nCOLLABORATORS\n\n- get name of the appliance\n\n- set name of the appliance\n\n- get current command (state) the appliance is executing\n\n- execute a command\n\n- set attributes of the appliance, i.e. size\n\n- get attributes of the appliance\n\nHASS Controller\n\nPermission\n\nAV Appliance\n\nAV Appliance\n\nRESPONSIBILTIES\n\nCOLLABORATORS\n\n- get name of the appliance\n\n- set name of the appliance\n\n- get current command (state) the appliance is executing\n\n- execute a command\n\nHASS Controller\n\nPermission\n\nGarage Door\n\nGarage Door\n\nRESPONSIBILTIES\n\nCOLLABORATORS\n\n- get name of the appliance\n\n- set name of the appliance\n\n- get current command the appliance is executing\n\n- get current state (open or closed)\n\n- set attributes, i.e. height and weight\n\n- execute a command\n\n- set horsepower of the garage door\n\n- get horsepower of the garage door\n\nHASS Controller\n\nPermission\n\nMicrowave\n\nMicrowave\n\nRESPONSIBILTIES\n\nCOLLABORATORS\n\n- get name of the appliance\n\n- set name of the appliance\n\n- get current command (state) the appliance is executing\n\n- execute a command\n\n- set attributes of the appliance, i.e. size\n\n- get attributes of the appliance\n\n- turn on\/off the microwave\n\n- set power of the microwave\n\n- set timer for the microwave\n\nHASS Controller\n\nPermission\n\nTV\n\nTV\n\nRESPONSIBILTIES\n\nCOLLABORATORS\n\n- get name of the appliance\n\n- set name of the appliance\n\n- get current command (state) the appliance is executing\n\n- execute a command\n\n- turn on\/off the TV\n\n- change channel\/volume\n\n- get current channel\/volume\n\nHASS Controller\n\nPermission\n\nDevice\n\nDevice\n\nRESPONSIBILTIES\n\nCOLLABORATORS\n\n- get device id\n\n- set device id\n\n- get current user of the device\n\n- set user of the device\n\n- get type of the device\n\n- set type of the device\n\nHASS Controller\n\nUser\n\nPermission\n\nPermission\n\nRESPONSIBILTIES\n\nCOLLABORATORS\n\n- set permission of a user to a particular appliance\n\n- get the permission status of a user to an appliance\n\nUser\n\nAppliance\n\nHASS Controller\n\nSequence Diagram\n\nTo operate the HAC System, user needs to operate each home appliance either by direct contact or by a remote control system. Sequence Diagram will explain the operation by a remote control system. To connect to the remote system, user needs computer embedded communication devices such as a cell phone, a PDA, or a laptop computer.\n\nAuthentication\n\nFlow of events:\n\nAfter user connects the remote system, user needs to log on to the system using valid username and password.\n\nA logon attempt shall limited to 3 times for security precaution.\n\nAfter all use of the system, user shall log out the system and communication between user and remote system is disconnected.\n\nOperate Garage Door\n\nFlow of events:\n\nAfter user log onto the system, remote system asks HASS controller a list of appliances.\n\nUser simply chooses the garage door from the appliance list.\n\nRemote system asks the command list of a garage door.\n\nHASS controller asks a garage door a list of commands.\n\nA garage door returns the list of commands to the HASS controller then HASS controller returns the list to the remote system, then remote system displays the command list\n\nUser chooses one of command list and HASS controller do the operation.\n\nOperate TV\n\nFlow of events:\n\nAfter user log onto the system, remote system asks HASS controller a list of appliances.\n\nUser simply chooses the TV from the appliance list.\n\nRemote system asks the command list of a TV.\n\nHASS controller asks a TV a list of commands.\n\nA garage door returns the list of commands to the HASS controller then HASS controller returns the list to the remote system, then remote system displays the command list\n\nUser chooses one of command list and HASS controller do the operation.\n\nOperate Microwave\n\nFlow of events:\n\nAfter user log onto the system, remote system asks HASS controller a list of appliances.\n\nUser simply chooses the microwave from the appliance list.\n\nRemote system asks the command list of a microwave.\n\nHASS controller asks a microwave a list of commands.\n\nA garage door returns the list of commands to the HASS controller then HASS controller returns the list to the remote system, then remote system displays the command list\n\nUser chooses one of command list and HASS controller do the operation.\n\nPAGE\n\n1"}],"basics":{"name":{"surname":"SHARMA","firstName":"SONAL"},"gender":"female"},"accomplishments":[{"Document Conventions":"\n\nSMARTHOME SECURITY SYSTEM project\u2019s aims are currently not strictly defined. Many of the requirement specifications and use cases provided in the version 1.0 of this document are merely a starting point and will provide a perspective for the intended purpose of this project.\n\nTechnical details related to hardware and software systems and interfaces are not included in this document in detail. Regarding information and sources will be provided in the appendix sections at the end of the documents.\n\nIntended Audience and Reading Suggestions\n\nThis Software Requirements document is intended for:\n\n− Developers who can review project\u2019s capabilities and more easily understand where their efforts\n\n  Should be targeted to improve or add more features to it.\n\n− Project testers who can use this document as a base for their testing strategy as some bugs are      \n\n  Easier to find using a requirements document. This way testing becomes more methodically    \n\n  Organized.\n\n− End users of this application who wish to read about what this project can do.\n\nProduct Scope\n\nSMARTHOME SECURITY SYSTEM is a simple but quite versatile home automation system which consists of four tightly connected subsystems\n\n.\n\nEnvironment and device sensors collection\n\nWireless network\n\nAnti-theft security\n\nUser Interface\n\nDevices management\n\nGuest control\n\nAs home appliances provide various data from their own work conditions and status, sensor collection provided as a generic device analyzes the data and sends it through wireless network to coordinator box.\n\nReceiving the data through local wireless system, coordinator box collects and stores the data on an online server. According to users\u2019 choices or previous statistics, it can act as a smart agent to provide certain reflexes in case of emergencies and possible threats.\n\nAll scenarios of actions and status information can be viewed through internet (web server) in which statistical data are accumulated. As well as viewing, user can send orders to the coordinator box in order to change home appliances\u2019 activities in real time.\n\n"}]}